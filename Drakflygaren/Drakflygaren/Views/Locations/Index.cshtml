@model IEnumerable<Drakflygaren.ViewModels.LocationViewModel>

@{
    ViewBag.Title = "Platser";
}

<h2>@ViewBag.Title <span class="pull-right">@*<button id="toggle-between-list-and-map" class="btn btn-primary">Lista / Karta</button>*@</span></h2>
<a href="@Url.Action("Create")"><i class="fa fa-plus"></i> Lägg till</a>
<hr />
<div id="locations-list">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Namn</th>
                <th>Stad</th>
                <th>Väder</th>
                <th>Vind</th>
                @if (Request.IsAuthenticated)
                {
                    <th>Favorit</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var locationViewModel in Model)
            {
                <tr>
                    <td>@locationViewModel.Location.Name</td>
                    <td>@locationViewModel.Location.City</td>
                    <td><i class="fa fa-sun-o"></i></td>
                    <td>2 m/s</td>
                    @if (Request.IsAuthenticated)
                    {
                        <td><a id="@locationViewModel.Location.Id" class="toggle-favorite"><i class="fa @Html.AttributeEncode(locationViewModel.Favorite ? "fa-star" : "fa-star-o") "></i></a></td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>
@*<div id="locations-map" class="hide-content">

    </div>*@
<div id="map_wrapper">
    <div id="map_canvas" class="mapping"></div>
</div>

@section scripts {
    <script>
        jQuery(function ($) {
            // Asynchronously Load the map API
            var script = document.createElement('script');
            script.src = "//maps.googleapis.com/maps/api/js?key=AIzaSyDOP-hCNyiygNNOURvqXC4A9VssSMieFGo&sensor=false&callback=initialize";
            document.body.appendChild(script);
        });

        function initialize() {
            var map;
            var bounds = new google.maps.LatLngBounds();
            var mapOptions = {
                mapTypeId: 'roadmap'
            };

            // Display a map on the page
            map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
            map.setTilt(45);

            // Multiple Markers
            var markers = [];

            // Info Window Content
            var infoWindowContent = [];

            @foreach (var locationViewModel in Model)
            {
                <text>
                markers.push([
                    '@locationViewModel.Location.Name',
                    @locationViewModel.Location.Latitude,
                    @locationViewModel.Location.Longitude])

                infoWindowContent.push([
                    '<div class="info_content">' +
                    '<h3>@locationViewModel.Location.Name</h3>' +
                    '<p>@locationViewModel.Location.City - @locationViewModel.Location.Creator.UserName</p>' + '</div>'])
                </text>
            }

            // Display multiple markers on a map
            var infoWindow = new google.maps.InfoWindow(), marker, i;

            // Loop through our array of markers & place each one on the map
            for (i = 0; i < markers.length; i++) {
                var position = new google.maps.LatLng(markers[i][1], markers[i][2]);
                bounds.extend(position);
                marker = new google.maps.Marker({
                    position: position,
                    map: map,
                    title: markers[i][0]
                });

                // Allow each marker to have an info window
                google.maps.event.addListener(marker, 'click', (function (marker, i) {
                    return function () {
                        infoWindow.setContent(infoWindowContent[i][0]);
                        infoWindow.open(map, marker);
                    }
                })(marker, i));

                // Automatically center the map fitting all markers on the screen
                map.fitBounds(bounds);
            }

            // Override our map zoom level once our fitBounds function runs (Make sure it only runs once)
            var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function (event) {
                //this.setZoom(14);
                google.maps.event.removeListener(boundsListener);
            });
        }
    </script>
}